<?php

namespace App\Http\Controllers\Voyager;

use App\Attribute;
use App\Help\Helper;
use App\Http\Controllers\Voyager\VoyagerBaseController;
use App\Product;
use App\ProductAttribute;
use App\Services\CopyService;
use Illuminate\Http\Request;
use Intervention\Image\Image;
use PHPUnit\TextUI\Help;

class ProductController extends VoyagerBaseController
{
    public function store(Request $request)
    {
        if(Product::where('url', $request->url)){
            $check = false;
            $tmp = 2;
            while(!$check){
                $url = $request->url.'_'.$tmp;
                if(!Product::where('url', $url)){
                    $check = true;
                }else{
                    $tmp = $tmp + 1;
                }
            }
            $request->request->set('url', $url);
        }
        $to_return = parent::store($request); // TODO: Change the autogenerated stub
        $product = Product::orderBy('created_at', 'desc')->first();
        if($product && $product->name == $request->name){
            $this->setAttributes($request, $product);
        }
        $this->setCategories($request, $product);
        $this->setTags($request, $product);
        return $to_return;
    }
    public function update(Request $request, $id)
    {
        $product = Product::find($id);
        $this->setCategories($request, $product);
        $this->setAttributes($request, $product);
        $this->setTags($request, $product);
        return parent::update($request, $id); // TODO: Change the autogenerated stub
    }
    public function setAttributes($request, $product){
        try{
            if(is_array($request->get('attributes'))){
                $attributes = $request->get('attributes');
            }else{
                $attributes = json_decode($request->get('attributes'));
            }
        }catch(\Exception $e){
            throw $e;
        }
        if(isset($attributes)){
            \App\Relations\ProductAttribute::where('product_id', $product->id)->delete();
            foreach ($attributes as $key => $attr){
                if(array_key_exists('value', $attr) && array_key_exists('attribute_id', $attr)){
                    \App\Relations\ProductAttribute::create([
                        'product_id' => $product->id,
                        'attribute_id' => $attr['attribute_id'],
                        'value' => $attr['value']
                    ]);
                }
            }
        }
    }
    public function setCategories($request, $product){
        $product->categories()->sync($request->categories);
    }
    public function setTags($request, $product){
        $product->tags()->delete();
        if($request->tags && is_array($request->tags)){
            foreach ($request->tags as $tag){
                $product->tags()->create([
                    'type' => 'product',
                    'tag' => $tag
                ]);
            }
        }
    }
    public function copy(Request $request){
        $product = Product::find($request->id);
        $copyService = new CopyService();
        $copyService->copy($product, ['attributes', 'tags', 'categories']);
        return back()->with(['message' => 'Skopiowano produkt']);
    }
    public function settings(Request $request){
        return view('vendor.voyager.products.products-settings');
    }
}
